package com.eomcs.oop.ex09.e.test;

public interface Computer {

  void compute();

  // 어느덧 세월이 흘러, 터치 스크린이 등장하면서
  // 컴퓨터에서 터치가 가능한 단계로 업그레이드 하게 되었다.
  // 그래서 컴퓨터라면 이제 터치도 가능해야 한다고 결론을 내렸고,
  // 규칙을 추가하게 된다.

  //void touch();// 추가하는 순간 기존 클래스들에서 컴파일 오류 발생!

  // 문제점
  // => 규칙을 변경하면, 그 규칙에 따라 만든 모든 클래스를 변경해야 한다.
  // => 내가 만든 규칙에 따라 내가 클래스를 만들었다면 내가 변경하면 되지만,
  //    내가 만든 규칙을 다른 많은 개발자들이 가져가서 클래스를 만들어 사용하고 있다면,
  //    내가 쉽게 규칙을 변경할 상황이 아닌 것이다.
  //    규칙 즉 인터페이스의 메서드를 변경하거나 제거, 추가하는 순간 
  //    이 인터페이스를 구현한 모든 클래스들에서 컴파일 오류가 발생하게 된다.
  // 
  // 하지만 그렇다고 해서 계속 옛날 규칙을 가져갈 수 없고, 
  // 새 프로젝트에는 변경된 규칙으로 클래스를 만들고 싶다.
  // 새 규칙을 새 인터페이스(예: Computer2)로 정의할 순 있지만,
  // 그렇게 하면 기존에 진행한 모든 프로젝트들과 호환되지 않는 문제가 발생한다.
  //
  // 기존 규칙을 변경하되, 기존 구현체(기존 규칙에 따라 작성한 클래스)에는 영향을 끼치고 싶지 않을 때 
  // 바로 다음 문법을 사용하라!
  // "디폴트 메서드(default method)" - JDK8에서 추가한 문법이다.

  default void touch() {

  }

}
